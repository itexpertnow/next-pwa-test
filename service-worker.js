// Import Workbox libraries from CDN for caching and routing capabilities
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js');

// Using Workbox to simplify service worker management
const { skipWaiting, clientsClaim, precacheAndRoute, cleanupOutdatedCaches } = workbox.core;
const { ExpirationPlugin } = workbox.expiration;
const { NetworkFirst, CacheFirst, StaleWhileRevalidate, NetworkOnly } = workbox.strategies;
const { registerRoute, setDefaultHandler, setCatchHandler } = workbox.routing;
const { BackgroundSyncPlugin } = workbox.backgroundSync;

// Force the waiting service worker to become the active service worker
skipWaiting();
clientsClaim();

// Precache and route assets defined in the manifest (auto-generated by Workbox during the build)
precacheAndRoute(self.__WB_MANIFEST);

// Clean up outdated caches
cleanupOutdatedCaches();

// Background Sync Plugin for POST requests
const bgSyncPlugin = new BackgroundSyncPlugin('post-api-cache', {
  maxRetentionTime: 24 * 60 // Retry for max of 24 hours (specified in minutes)
});

// Caching strategies for different types of requests
registerRoute(
  // Cache CSS and JavaScript files
  /\.(?:js|css)$/,
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

registerRoute(
  // Cache HTML files
  ({request}) => request.destination === 'document',
  new NetworkFirst({
    cacheName: 'html-cache',
  })
);

registerRoute(
  // Cache image files
  ({request}) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'image-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
        purgeOnQuotaError: true, // Automatically clean up if quota is exceeded.
      }),
    ],
  })
);

registerRoute(
  // Network first strategy for API calls
  ({url}) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10, // Fallback to cache if the network does not respond within 10 seconds
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Set default handler for all other requests to Stale While Revalidate strategy
setDefaultHandler(new StaleWhileRevalidate());

// Catch handler for handling failures
setCatchHandler(({ event }) => {
  switch (event.request.destination) {
    case 'document':
    case 'image':
      return caches.match('/fallback.html');
    default:
      return Response.error();
  }
});

// Custom event listeners for service worker lifecycle events
self.addEventListener('install', () => {
  console.log('Service worker installed');
});

self.addEventListener('activate', () => {
  console.log('Service worker activated');
});

// Handle fetch events for additional logic
self.addEventListener('fetch', (event) => {
  event.respondWith(
    (async () => {
      try {
        const response = await fetch(event.request);
        const cache = await caches.open('dynamic-cache');
        cache.put(event.request, response.clone());
        return response;
      } catch (error) {
        return await caches.match(event.request);
      }
    })()
  );
});
